<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java 数组]]></title>
    <url>%2F2019%2F06%2F01%2FJava-%E6%95%B0%E7%BB%84%2F</url>
    <content type="text"><![CDATA[写在开头&#8195;大朋友小朋友节日快乐 🎈&#8195;“你可以不太乖 你不可以学坏”&#8195;今天编辑了下About页面，复习了之前学过的内容，接下来再啃一块大骨头。&#8195;进入正题，搜索功能已经完善好了，可以直接从左侧搜索~ &#8195;这一篇写java数组。 概念举个栗子：现在想存储5名同学的姓名，目前我们可以用定义5个String类型的变量,存储学生姓名来实现。 现在我想存储5000名同学的姓名，我们一个再用定义5个String类型的变量，就显得异常复杂，且查找同学的时候也变得很困难。 我们就想着找一个容器，存放着大量的数据，这个容器就是数组。 数组可以存放任意类型，但是同一次存放的必须是同一个类型。数组自动编号，通过数组这种特有的方式,将每一个学生的信息都获取到，编号从0开始。 数组的定义方法]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[“其实，你早就知道答案”]]></title>
    <url>%2F2019%2F06%2F01%2F%E2%80%9C%E5%85%B6%E5%AE%9E%EF%BC%8C%E4%BD%A0%E6%97%A9%E5%B0%B1%E7%9F%A5%E9%81%93%E7%AD%94%E6%A1%88%E2%80%9D%2F</url>
    <content type="text"><![CDATA[所有的大人都是孩子，只要你未曾遗忘---《小王子》 祝你祝我也祝我的小朋友儿童节快乐 🎈 ![](http://prvznqstr.bkt.clouddn.com/ing/1.jpg) ![](http://prvznqstr.bkt.clouddn.com/ing/2.jpg) ![](http://prvznqstr.bkt.clouddn.com/ing/3.jpg) ![](http://prvznqstr.bkt.clouddn.com/ing/4.jpg) ![](http://prvznqstr.bkt.clouddn.com/ing/5.jpg) ![](http://prvznqstr.bkt.clouddn.com/ing/6.jpg) ![](http://prvznqstr.bkt.clouddn.com/ing/7.jpg) ![](http://prvznqstr.bkt.clouddn.com/ing/8.jpg) “你可以不太乖 你不可以学坏” 转自@人民日报]]></content>
      <tags>
        <tag>日记</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 方法]]></title>
    <url>%2F2019%2F05%2F31%2FJava-%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[写在开头&#8195;一名优秀的计算机科学家，可能不一定是一名优秀的物理学家，但一定是一名优秀的数学家，我理解的计算机科学实质上是把数学语言转换成计算机语言的过程。&#8195;而我的数学并不好…&#8195;最难受的是英语也看不懂…&#8195;进入正题，搜索功能已经完善好了，可以直接从左侧搜索~ &#8195;这一篇写java方法。 方法方法的定义&#8195;在前面几个文章中我们经常使用到 System.out.println()，它是什么呢？ println() 是一个方法。 System 是系统类。 out 是标准输出对象。 &#8195;这句话的用法是调用系统类 System 中的标准输出对象 out 中的方法 println()。 &#8195;那么什么是方法呢？ Java方法是语句的集合，它们在一起执行一个功能。 方法是解决一类问题的步骤的有序组合 方法包含于类或对象中 方法在程序中被创建，在其他地方被引用 方法的优点// 可以这么理解把使用频率比较高的功能打包在一起，可以随时调用，主程序就简单明了 还好维护。 使程序变得更简短而清晰。 有利于程序维护。 可以提高程序开发的效率。 提高了代码的重用性。 方法定义的解释及注意事项定义格式：修饰符 返回值类型 方法名(参数列表){ 功能逻辑;} 对应下来就是： 12345public static void main(String[] args)&#123; 逻辑;&#125; 解释 修饰符: public static —- public修饰符,static 修饰符 返回值类型: 指方法应该是有什么样的结果,返回值类型可以是任意的数据类型,如果没有 返回值,那么写成void(例如main方法,就没有返回值) 参数列表: 表示我要做一个功能,需要提供给我哪些数据,写在方法名后的小括号中 参数可以没有,不写; 可以有一个参数: 数据类型 变量名 多个参数(没有个数限制) : 数据类型 变量名 , 数据类型 变量名注意: 方法的参数列表中的变量,只能在方法的大括号中使用 方法的返回: 关键字return,表示返回,将这个方法的结果,返回到方法的调用者处 如果方法有返回值,return 必须写, return后面的数据必须与返回值类型一致; 如果方法没有返回值,return 可以省略,可以写(return ; 没意义) 方法如果没有返回值,那么在定义上,返回值类型处必须写成void {} : 表示这个方法的范围,功能都需要写在这一对大括号中 方法的命名规则://行业内一般的命名规则，以后进公司如果不这样做，会被打的。 方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写，不使用连接符。例如：addPerson。 下划线可能出现在 JUnit 测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：test_ ，例如 test 在代码里解释下： 12345678910111213141516171819202122232425public class Function1&#123; public static void main(String[] args) &#123; System.out.println("Hello World!"); &#125; /*定义一个方法:需求: 求长方形的周长 修饰符 返回值类型 方法名(参数列表)&#123; 功能逻辑; &#125; 1. 修饰符,暂时先记忆成 public static 2. 返回值类型: int 3. 方法名: getArea 4. 参数列表: 两个参数 int weight,int height 5. 返回值: int 类型的zhouchang 6. 大括号: 通过给提供的长和宽的参数,进行计算 */ public static int getArea(int weight,int height)&#123; int zhouchang = (weight + height)*2; return zhouchang; &#125;&#125; 方法的调用调用方法：Java类文件中,JVM虚拟机,将class文件放入内存中,类文件要运行,执行功能,JVM,只主动的调用main方法(main方法做为程序的唯一执行入口) 举例: Scanner 键盘输入,使用了两个方法 nextInt() ; next(); 说明: main方法,由JVM主动调用的,因此运行类的时候,运行main方法,main方法从上到下的顺序执行 除了main方法外,其余的方法,不会主动的进行运行 方法的调用,需要在main中进行调用也可以在其他方法中调用(后面讲解) 定义时,参数”数据类型 变量名”的形式(形式参数)调用时,所传递的参数必须与定义时参数类型一致,参数顺序一致调用时,给的值都是实际值(实际参数) 同一个类中,方法可以直接通过方法名调用 方法调用的注意事项: 方法一定要定义在类的内部 1个方法中不能再定义另外一个方法,但是可以调用方法 方法执行结束有两种情况: 1) 执行到return 语句 2) 整个方法的内容都执行完毕 因此,方法中,return后面的语句不会被执行 123456789101112131415161718192021public class Function1&#123; public static void main(String[] args) &#123; // 2. 调用方法,在同一个类中,可以直接写方法名进行调用(方法的调用处) int lang = getArea(3,5);// 参数是实际参数 System.out.println("周长为"+lang); &#125; /* 1. 定义一个方法:需求: 求长方形的周长 修饰符 返回值类型 方法名(参数列表)&#123; 功能逻辑; &#125; */ public static int getArea(int weight,int height)&#123;// 形式参数 int zhouchang = (weight + height)*2; System.out.println(zhouchang); return zhouchang; &#125;&#125; 12345678910111213141516171819202122232425// 方法在其他方法中的调用// 方法的互相调用public class Function2 &#123; public static void main(String[] args) &#123; getSum1(); &#125; public static void getSum(int x, int y)&#123;// 方法定义时的参数是形式参数 System.out.println(x+y); &#125; public static int getSub(int x,int y)&#123; return x-y; &#125; // 定义一个方法,在其他方法(不是main方法)中调用 public static void getSum1()&#123; getSum(9,10); // 方法调用时参数是实际参数 //方法getSub有返回值类型,是int类型,那么方法调用时,可以用int类型接值,也可以不接值 int z = getSub(3,5); System.out.println(z); &#125;&#125; 方法在内存中的运行方式 // 栈内存 ⭐⭐⭐ 方法重载 ⭐⭐⭐方法重载的概念重载: 指在同一个类中,方法名相同,但是方法的参数列表不同,这种情况,称为方法的重载举例: Random类: 生成随机数, nextInt(); 随机整数,整个int类型的范围 nextInt(5); 随机的整数,[0-5),实际上0-4 上述两个nextInt() 方法就是方法的重载 方法重载的形式方法重载(Overload): 方法的重载,必须发生在同一个类中的相同的方法名 要求参数列表不同(以下三个满足任何一个就属于方法重载)1) 参数个数不同 2) 参数类型不同 3) 不同参数间的排列顺序不同 方法重载,与方法的返回值类型无关 如果同一个类中,方法名相同,参数列表相同,报错,属于方法的重复定义 //其实还是比较容易理解的，就是一个方法中，如果我获取得参数不完全一样就是重载。 说明:JVM在进行方法的调用时,根据方法名以及参数列表来区分调用哪个方法 在代码中体现下： 123456789101112131415161718192021222324252627//不同参数个数的方法重载代码public class FunctionOverload&#123; public static void main(String[] args) &#123; int z = getSum(6); System.out.println(z); int z1 = getSum(3,9); System.out.println(z1); &#125; /*方法的重载, 参数个数不同 两个getSum方法,一个参数为int类型,一个参数为int,int类型,实现了方法的重载*/ public static int getSum(int x)&#123; return x; &#125; public static int getSum(int x,int y)&#123; return x+y; // System.out.println(x+y);// 错误代码: 无法访问的语句(这句话,永远不会被执行到),因为方法中遇到return ,整个方法结束,return 后面的语句就不执行了(类似continue,break) &#125;&#125; 123456789101112131415161718192021222324//参数类型不同的方法重载(方法重载与方法的返回值类型无关)// 方法一定要定义在类的内部public class FunctionOverload1&#123; public static void main(String[] args) &#123; int z = getSum(6); System.out.println(z); double z1 = getSum(3.0); System.out.println(z1); &#125;/*方法的重载, 参数类型不同 两个getSum方法,1个参数为int类型,一个方法为double类型,实现了方法的重载 方法重载与返回值类型无关*/ public static int getSum(int x)&#123; return x; &#125; public static double getSum(double x)&#123; return x*2; &#125;&#125; 123456789101112131415161718192021222324252627282930//不同类型参数间的排列顺序不同重载// 方法一定要定义在类的内部public class FunctionOverload2&#123; public static void main(String[] args) &#123; double z = getSum(6,2.0); System.out.println(z); double z1 = getSum(3.0,5); System.out.println(z1); &#125;/*方法的重载, 不同类型参数间排列顺序不同两个getSum方法,一个参数为int,double类型,一个方法为double,int类型,实现了方法的重载*/ public static double getSum(int x, double y)&#123; return x+y; &#125; /* // 参数名字,不是重载的条件public static double getSum(int y, double x)&#123; // 错误代码: 原因,方法重复定义 return x*2; &#125;*/ public static double getSum( double y, int x)&#123; // 错误代码: 原因,方法重复定义 return (x+y)*2; &#125;&#125; 3 晚安&#8195;今天就到这里了，明天见，加油！]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 嵌套循环]]></title>
    <url>%2F2019%2F05%2F31%2FJava-%E5%B5%8C%E5%A5%97%E5%BE%AA%E7%8E%AF%2F</url>
    <content type="text"><![CDATA[写在开头&#8195;善变的我又来了。&#8195;每天看的内容实在是太多了，都写进去真的是“老太婆的裹脚布又臭又长”，不如把一两个重点的内容写好才是真的。&#8195;嗯就这样，每天写一个知识点，写的多一点、细一点。&#8195;搜索功能已经完善好了，可以直接从左侧搜索~ &#8195;这一篇写java嵌套循环。 嵌套循环概念每次循环内部的执行逻辑，恰巧又有另外一个循环 嵌套for循环的语法格式:for(int i = 1 ; i &lt;= 3 ;i ++){ for(int j = 1; j &lt;= 5; j++){ System.out.println(“教练第”+i+”次指令,队员跑第”+j+”圈”); } } 详细的逻辑思想我会在练习2 中文字体现下/ 练习112345678910111213141516171819202122/*打印 **** **** *****/public class lianxi5&#123; public static void main(String[] args) &#123; for(int x=0;x&lt;3;x++) &#123; for(int y=0;y&lt;4;y++) &#123; System.out.print("*"); &#125; System.out.println(" ");&#125; &#125;&#125; 练习2123456789101112131415161718192021222324252627282930313233/* 打印: ***** **** *** ** **//*什么时候使用嵌套for循环1) 如果有逻辑重复执行,想到循环2) 每次循环,循环体,如果还是一个重复的动作,那么循环体内容仍然还是一个循环规律: 一般来说外层循环用来表示循环执行的次数内层循环用来表示每次循环内部需要执行的逻辑次数*/public class XingXingPrint&#123; public static void main(String[] args) &#123;for(int i = 1 ; i &lt;= 5 ; i++)&#123;// 外层循环表示循环次数,一共打印5行星星,因此外层循环5次 /*每次打印星星时,星星变化规律从5个依次减少,最后变成1个怎么由5变到1,让j=i*/for(int j = i ; j &lt;=5; j++)&#123; System.out.print("*"); &#125; System.out.println(); &#125; &#125;&#125; 练习3123456789101112131415161718192021222324252627282930313233/*打印 **** *** ** * * ** *** *****/public class lianxi5&#123; public static void main(String[] args) &#123; for(int x=0;x&lt;=4;x++) &#123; for(int y=x;y&lt;=4;y++) &#123; System.out.print("*"); &#125; System.out.println(" ");&#125; for(int z=0;z&lt;=4;z++) &#123; for(int k=0;k&lt;=z;k++) &#123; System.out.print("*"); &#125; System.out.println();&#125; &#125;&#125; 练习4-99乘法1234567891011121314151617181920212223/*1*1=11*2=2 2*2=41*3=3 2*3=6 3*3=91*4=4 2*4=8 3*4=12 4*4=16......*/public class lianxi99&#123; public static void main(String[] args) &#123; for(int x=1;x&lt;=9;x++) &#123; for(int y=1;y&lt;=x;y++) &#123; int z= x*y; System.out.print(x+"*"+y+"="+z); System.out.print(" "); &#125; System.out.println(); &#125; &#125;&#125; 练习512345678910111213141516171819202122232425262728/*----*---* *--* * *-* * * ** * * * **/public class lianxi6&#123; public static void main(String[] args) &#123;for (int x =0 ; x&lt;5; x++)&#123; for (int y=x+1 ;y&lt;5 ;y++ ) &#123; System.out.print("-"); &#125; for (int z=0 ;z&lt;=x ;z++ ) &#123; System.out.print("* "); &#125; System.out.println(); &#125; &#125;&#125; 死循环死循环: 概念,循环永远不结束例如: 123456for( ; ;)&#123;&#125;for(int i = 0 ; i &lt;=0 ; i--)&#123;&#125; 1234while(true)&#123;&#125; 总结: for循环的死循环发生的原因,判断条件永远为true while的死循环,原因,表达式永远为true 死循环代码是可以执行的,并且一直在执行,没有结束的时候 注意: 写代码的时候,一定要注意,千万不要造成死循环 循环跳出语句 continue : 关键字,表示停止本次循环,继续执行下一次循环,continue之后的循环体代码不执行 break : 关键字,表示直接将本次循环全部终止(跳出本次循环),break之后的循环体代码不执行,当前循环直接结束.注意: break每次只能结束一个循环 return : 表示返回,将方法的时候再具体讲解(将整个方法结束)(后面讲) 代码中体现下： 12345678910111213141516//continue 结束本次循环public class ContinueDemo&#123; public static void main(String[] args) &#123; // 要求: 1-10之间的所有偶数,打印出来(continue)// continue: 表示结束本次循环,接着执行下一次循环,continue之后的循环体代码不执行 for(int i = 1 ; i &lt;= 10 ;i++)&#123; //判断这个是是不是偶数 if( i % 2 == 1)&#123; continue;// 结束本次循环,接着执行i++,进行下一次循环 &#125; System.out.println(i); &#125; &#125;&#125; 12345678910111213141516// break 结束整个循环public class BreakDemo&#123; public static void main(String[] args) &#123; // 要求: 打印1-10之间的整数,当遇到5的时候,循环结束(break) // break: 表示结束循环,break之后的循环体代码不执行 for(int i = 1 ; i &lt;= 10; i++)&#123; if(i == 5)&#123; break;// 结束整个循环 &#125; System.out.println(i);// 1-4,不打印5,因为5还没打印呢,循环就结束了 &#125; &#125;&#125; 对学习编程者的忠告： 眼过千遍不如手过一遍！ 书看千行不如手敲一行！ 手敲千行不如单步一行！]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 第四天]]></title>
    <url>%2F2019%2F05%2F30%2FJava-%E7%AC%AC%E5%9B%9B%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[写在开头&#8195;所有知识点都写下来实在是太多啦，而且有的知识点还是比较容易理解的，从今天开始我罗列出一天所学的知识点，比较容易理解的直接贴一个我觉得解释的比较全面的网址。&#8195;嗯就这样！不是我懒！&#8195;里面的知识点不可能都展现在标题，大家使用搜索功能（已经修复好了，还加了个萌萌的板娘）搜自己想要了解的知识点。 1 流程控制语句 switch case1.1 switch…case语法结构switch…case语法结构: switch(表达式){ case 常量1: 语句1; break; case 常量2: 语句2; break; … default: default语句; break;} 说明： switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。 switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。 case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。 当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。 当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。 switch 语句可以包含一个 default 分支，该分支一般是 switch 语句的最后一个分支（可以在任何位置，但建议在最后一个）。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。 switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。 用代码说话： 123456789101112131415161718192021222324252627282930313233343536373839404142//switch...case 语句 import java.util.Scanner; //import java.util.Random; public class SwitchCaseDemo&#123; public static void main(String[] args) &#123; //需求: 键盘输入一个整数(1-7),判断这是星期几 Scanner sc = new Scanner(System.in); System.out.println("请输入一个代表星期的整数:"); int xq = sc.nextInt(); /* switch中的表达式xq与下面的case匹配,匹配成功,执行对应case的内容, 匹配不成功,执行default中的内容 */ switch(xq)&#123;// xq的类型可以是: byte short char int String case 1: System.out.println("星期一"); break; case 2: System.out.println("星期二"); break; case 3: System.out.println("星期三"); break; case 4: System.out.println("星期四"); break; case 5: System.out.println("星期五"); break; case 6: System.out.println("星期六"); break; case 7: System.out.println("星期七"); break; default: System.out.println("输入错误"); break; &#125; &#125; ase语句后,break,不是必须的(那么switch就有穿透性),switch...case语句具有穿透性 举个栗子：键盘输入一个整数(1-7),匹配1-5,输出工作日,6-7输出休息日 1234567891011121314151617181920212223242526272829303132// switch的穿透性import java.util.Scanner; public class SwitchChuanTou&#123; public static void main(String[] args) &#123; //要求: 键盘输入一个整数(1-7),匹配1-5,输出工作日,6-7输出休息日 Scanner sc = new Scanner(System.in); System.out.println("请输入一个代表星期的整数:"); int xq = sc.nextInt(); /* switch...case的穿透性, 穿透性指: switch在进行case匹配时,匹配成功,但是没有遇到break,也没有遇到右大括号,就继续向下执行逻辑,直到遇到break或者右大括号,switch结束 */ switch(xq)&#123;// byte short char int String case 1: case 2: case 3: case 4: case 5: System.out.println("工作日"); break; case 6: case 7: System.out.println("休息日"); break; default: System.out.println("输入错误"); break; &#125; &#125;&#125; 2 循环语句2.1 for循环语句的语法格式 for关键字,循环循环: 指同一个逻辑,需要多次执行,使用循环举例: 登录界面,客户姓名,客户密码,姓名和密码都正确,登录成功 如果姓名或密码输入错误了,给你三次机会,这三次机会就可以使用循 环来完成这个功能 for的语法格式:for(初始化值(定义变量); 判断语句; 变量值的变化(自增或自减)) 多次执行的语句; 说明: 初始化值 int i = 0; 判断语句,必须是boolean类型的逻辑,i &lt; 10 变量值的变化i++for(int i = 0; i &lt; 10;i++){// 功能: 能将0-9的整数打印出来System.out.println(i);} 只要判断语句为true,那么for循环中的语句就会执行 2.2 for循环的执行过程 2.3 for 循环的练习12345678910111213// 打印数字5-1public class ForPrintDemo&#123; public static void main(String[] args) &#123; // for 起始值 5 ,判断条件 &gt;=1 , 变化 -- // for循环内部定义的变量 int i = 5; 只能在循环的大括号中使用 for(int i = 5 ; i &gt;= 1 ; i --)&#123; System.out.println(i); &#125; // System.out.println("-----------"+i); &#125;&#125; 123456789101112131415161718192021222324//计算1+2+3+...+100的和// 1+2 = 3+3=6+4=10...+100 = 5050public class Print1To100&#123; public static void main(String[] args) &#123; // sum值作为1-100的总和 int sum = 0; //for 起始值1, &lt;=100 , ++ for(int i = 1 ; i &lt;= 100 ; i++)&#123; /* 1 : 0+1 = 1 = sum i = 2 2: sum = 1 + 3 = 3; i = 3 3: sum = 3 + 3 = 6; i = 4 4: sum = 6 + 4 = 10 .... */ sum = sum + i; &#125; System.out.println(sum); &#125;&#125; 2.4 while 循环 while循环语法结构:while(表达式){ while语句;} 说明: 表达式必须是boolean类型 表达式为true,那么执行大括号中的while语句 表达式为false,那么while大括号中的语句不执行,while结束 12345678910111213141516171819//打印数字5-1 (while)// while循环语句public class whileDemo&#123; public static void main(String[] args) &#123; // 打印数字5-1 /*for(int i = 5 ; i &gt;=1 ; i --)&#123; System.out.println(i); &#125;*/ int i = 5; while(i &gt;=1)&#123;// 判断条件 i只要大于等于1,那么while内的逻辑就执行 System.out.println(i); i--; &#125; &#125;&#125; for和while的使用分析: for一般使用于值的变化规律性强,可预计循环次数 while使用,一般是不明确知道循环的次数123456789101112131415161718192021222324252627282930/*要求: 珠穆朗玛峰高8848米,现在有一张纸0.01米,问,这张纸折多少次能达到珠穆朗玛峰的高度double paper = 0.01;int count = 0;while( paper &lt;= 8848)&#123; paper = paper* 2;count++;&#125;打印count*///输入一个高度，求一张0.01的纸折多少次可能要这个高度。import java.util.Scanner;public class P1&#123; public static void main (String[] args) &#123;Scanner sc =new Scanner(System.in); //或者高度。 System.out.println("请输入一个整数作为高度："); int m=sc.nextInt(); //定义一个整数作为折纸的次数、 int c=0; double z =0.01; while(z&lt;=m) &#123; z=z*2; c++; &#125; System.out.println("折纸的次数是："+c); &#125;&#125; 用代码说一下while循环的注意事项： 123456789101112131415161718192021// while循环的注意事项public class WhileZhuYi&#123; public static void main(String[] args) &#123; boolean flag = false; while(flag)&#123; System.out.println("Hello World!"); &#125; /* 错误的语句while(false)&#123; // 无法访问的语句: while中的代码,永远不会被执行到(访问到),因此编译时报错 System.out.println("Hello World!"); &#125;*/ /*while (true) //这是可以运行的,是死循环,就是循环永远没有结束的时候 &#123; &#125;*/ &#125;&#125; 2.5 while 循环do : 关键字,做,操作,实行while : 关键字,循环 do…while的语法结构: do{ 循环执行的语句;}while(表达式); 说明: do语句,用来执行循环的,进入到do…while中,那么do里面的内容,先执行一次然后,判断,while中的表达式结果,如果为true,那么就继续执行do中的内容如果为false,那么dowhile就结束 do..while 和while的区别do..while 首先必须先执行一次循环体while循环体的执行与否与表达式有关系,如果表达式直接为false,那么while一次都不执行 12345678910111213141516171819// do while 循环public class DoWhileDemo&#123; public static void main(String[] args) &#123; int i = 0; // do...while语句,不管while中的表达式为true或者false,都先执行一次循环 do &#123; System.out.println("+++++++++" + i); &#125; while ( i &gt; 6); // while判断条件为false,while一次都不执行 while( i &gt; 6)&#123; System.out.println("----"+i); &#125; &#125;&#125; 3 晚安&#8195;今天就到这里了，明天见，加油！]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 第三天]]></title>
    <url>%2F2019%2F05%2F29%2FJava-%E7%AC%AC%E4%B8%89%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[写在开头&#8195;所有知识点都写下来实在是太多啦，而且有的知识点还是比较容易理解的，从今天开始我罗列出一天所学的知识点，比较容易理解的直接贴一个我觉得解释的比较全面的网址。&#8195;嗯就这样！不是我懒！&#8195;里面的知识点不可能都展现在标题，大家使用搜索功能（很快就可以修复好）搜自己想要了解的知识点。 1 运算符1.1 基本算数运算符1.2 自增自减运算 ⭐⭐⭐&#8195;自增自减运算是java面试中百分百会考察的知识点。也是初学者不好理解的一点。 ++:表示自增，每次增加1； –:表示自减，每次减少1； 自增或自减使用注意事项： ++或者–当变量不参与运算时,写在变量前或者变量后,效果一样,都是自增或者自减1 当变量参数运算时,++或–写在变量前,先进行变量自身的++或–,再进行运算++或–写在变量后,先使用变量值本身进行运算,运算完毕再进行变量自身的++或– 在代码里或许更好理解点 1234567891011121314151617181920212223242526272829// ++ 或 -- 算数运算符public class ZiZengZiJian&#123; public static void main(String[] args) &#123; int i = 9; // 变量不参与运算,变量i的自增,+1 相当于i = i+1; i++; System.out.println(i);//10 // 变量i的自增 ++i; System.out.println(i);//11 /* 变量参与运算 ++或--写在变量前,先进行变量自身的++或--,再进行运算 ++或--写在变量后,先使用变量值本身进行运算,运算完毕再进行变量 */ int y = ++i + 5; System.out.println(y);//17 int i2 = 10; int z = (i2--) + 7; System.out.println(z);//17 //int z = (--i2) + 7; //System.out.println(z);//16,16的结果是按照i2的值为10进行计算的 &#125;&#125; 1.3 赋值运算符赋值运算符: 主要是进行赋值以及运算 = : 表示把右边的数据,赋值给等号的左边举例: int i = 9 ; 表示将9的数值赋值给变量i += :举例: int i = 10;i+=2;相当于: i= i+2;1) 先进行运算i+2 2) 将i+2的结果,赋值给变量i 剩下的有makdown特殊字符，我放在代码块里： 1234-= : int i = 10;i-=3; 相当于 i = i-3;*= : int i = 10; i *=2; 相当于 i = i *2;/= : int i = 10; i /=2; 相当于 i = i /2;%= : int i = 10; i %=2; 相当于 i = i %2; 再来一串代码，更容易理解点： 123456789101112// 赋值运算符public class FuZhiYunSuan &#123; public static void main(String[] args) &#123; // 赋值 int i = 9; // += 相当于: i= i+2; 1) 先进行运算i+2 2) 将i+2的结果,赋值给变量i i+=2; System.out.println(i);// 11 &#125;&#125; 1.4 比较运算符代码都写了，不放上去就是浪费，浪费是可耻的! 12345678910111213141516171819202122//比较运算符public class BiJiaoYunSuan&#123; public static void main(String[] args) &#123; int i = 9; int y = 10; // 判断两个数值是否相等,先将等号右边的表示式计算结果赋值给b变量 boolean b = i == y; System.out.println(b);// false // 判断两个数值是否不相等 boolean b1 = i!=y; System.out.println(b1);// true /* 第一个类型: 10 &lt; i boolean 第二个类型: boolean &lt; 20 20是int类型,booleab无法与int类型进行比较 */ //boolean b2 = 10 &lt; i &lt; 20 ; //错误,不能进行连续的比较,比较必须分开进行 //System.out.println(b2); &#125;&#125; 1.5 逻辑运算符逻辑运算: 将表达式真假值判断做合理的逻辑结合举例: 要求: 登录界面,客户姓名,客户密码,如果客户想要正确登录条件: 客户姓名真的 并且 客户密码对的说明: 逻辑运算符的结果,并不是一个数值,结果是boolean (true真 false假) 1.5.1 &amp; 相当于中文“并且”，即运算双方都需要为ture 使用场景：用户名&amp;密码，两者都需要满足ture时，才可以登录系统。两者有一个false或者都为false都不能完成登录系统。 ture &amp; ture—–tureture &amp; false—-falsefalse &amp; ture—-falsefalse $ fase—-false 1.5.2.| 相当于中文“或者”，即运算双方有一个为ture就为ture 使用场景：信息收集时候，要求填写手机号和家庭座机二者有一个即可。 true | true truetrue | false truefalse | true truefalse | false false 1.5.3 &amp;&amp; 结果与&amp; 完全相同 &amp;&amp;与&amp;的不同：如果左边的表达式,能决定&amp;&amp;的返回值结果,那么右边的表达式不管是什么都不再执行，所以性能比&amp;高。 1.5.4 || 结果与| 完全相同 ||与|的不同：如果左边的表达式,能决定||的返回值结果,那么右边的表达式不管是什么都不再执行，所以性能比|高。 说明: 实际的开发场景中,基本上都使用 &amp;&amp; 与 || 1.5.5 ^ ! 运算放点代码理解下： 1234567891011121314151617181920212223242526272829//逻辑运算符public class LuoJiPanDuan&#123; public static void main(String[] args) &#123; int x = 3; int y = 4; boolean b = x &gt; y;// false System.out.println(b); boolean b1 = x &lt;= y;// true System.out.println(b1); // 逻辑运算,与, false &amp; true ,&amp;两边的数据都为真,结果才是真 boolean b2 = b &amp; b1 ; System.out.println(b2); // 逻辑运算,或,false | true ,|两边有任意一个为真,结果为真,否则为假 boolean b3 = b | b1 ; System.out.println(b3); // 逻辑运算,!,取反 boolean b4 = !b;// b本身是false System.out.println(b4);// true // &amp; 两边的表达式都会进行运算 boolean b5 = false &amp; ++y &gt; 4; System.out.println(y+"------"+b5);// 5-----false // &amp;&amp; ,如果左边的表达式为false,右边的表达式不进行计算 boolean b6 = false &amp;&amp; (x++) == 3; System.out.println(x+"------"+b6);// 3 -----false &#125;&#125; 1.6 三元运算符表达式？表达式1：表达式2 表达式：必须是boolean类型的表达式。 ？：问，前面的表达式的结果是ture还是false。 表达式1：如果表达式的结果为ture，那么整个表达式的结果就为表达式1 表达式2：如果表达式的结果为false，那么整个表达式的结果就为表达式2 表达式1和表达式2的类型尽量一致。 123456789101112131415public class Sanyuan&#123; public static void main(String[] args) &#123; //小明的成绩，大于80分就买飞机，小于80，作业写100遍 int score = 84; //三元运算符，结果为string。 String s =score&gt;=80?"买飞机":"写100遍"； System.out.println(s); //三元运算符，结果为int。 int i =score&gt;=80?100:1000； System.out.println(i); &#125;&#125; 1.7 位移运算位移运算：数据在内存中，可以通过位置的移动，来进行计算底层：十进制数能转换成2进制数 位移的分类： 123&gt;&gt;：右移，每次向右移动一位，可以让一个十进制数/2&lt;&lt;:左移，每次向左移动一位，可以让一个十进制数*2&gt;&gt;&gt;：正数的向右移动一位，可以让一个十进制数/2 说明： 只能进行整数运算。 123456789101112131415161718192021public class C6&#123; public static void main(String[] args) &#123; int i = 10; //向左移动一位，原值*2 i = i &lt;&lt; 1 ; System.out.println(i); //20 int x = 10; //向左移动一位，原值/2 x = x &gt;&gt; 1 ; System.out.println(x); //5 int y = 5; //向左移动二位，原值/2/2 y = y &gt;&gt; 2 ; System.out.println(y); //1 &#125;&#125; 2 引用数据类型 ⭐⭐⭐2.1 数据类型的概述 基本数据类型,四类八种,比较简单,直接表达出数据属于那种具体类型 引用数据类型: 类(class),数组,接口举例: 类 Person 属性: 名字,年龄,眼睛,嘴 功能: 吃饭,睡觉,喝水引用: 指Person在内存中进行存储,记录的不仅仅是你的变量名,记录的是Person在内存中的地址 2.2 引用数据类型的定义基本数据类型: 数据类型 变量名 = 变量值 ;引用数据类型:定义格式 :举例: 2.2.1 Scanner类Scanner类功能可以接收键盘输入的内容 需要先导包,确定,要使用的类,在哪个路径下,使用 import关键字, import java.util.Scanner;//改包在jdk根目录下有一个src.zip Scanner类对象的创建:数据类型 变量名 = new 数据类型();Scanner sc = new Scanner(System.in); 使用sc变量名. 方法名,这样可以使用Scanner中的具体方法(功能)Scanner类中的功能: nextInt(); 接收键盘输入的一个整数,返回值的,int类型的整数 next(); 接收键盘输入的一个字符串,返回值也是String类型 1234567891011121314151617181920212223242526272829303132// 引用数据类型// Scanner 在哪个路径下,Scanner是JDK写好的一个类,你可以直接拿来使用,但是有使用步骤import java.util.Scanner;//1. 使用import关键字,进行Scanner类所在路径的一个导入动作public class C7&#123; // 2. 创建一个Scanner对象 : 数据类型 变量名 = new 数据类型(); public static void main(String[] args) &#123; Scanner sc =new Scanner(System.in); // 3. 使用sc变量名.方法名(),实现方法对应的功能 /* Scanner类中的方法(功能) 1) nextInt(); 接收键盘输入的一个整数,返回值的,int类型的整数 */ System.out.println("请输入一个整数："); int x =sc.nextInt(); System.out.println("您输入的整数是："+x); // next(); 接收键盘输入的一个字符串,返回值的,int类型的字符串 System.out.println("请输入一个字符串："); String s =sc.next(); System.out.println("您输入的字符串是："+s); &#125;&#125; 接收键盘输入的两个整数求和： 123456789101112131415161718192021import java.uil.Scanner;public class C7&#123; public static void main (String[] args) &#123;Scanner sc = new Scanner( System.in);System.out.println("请输入一个整数：");int a =sc.nextInt();System.out.println("请输入二个整数：");int b = sc.nextInt();int sum =a +b;System.out.println("两数之和是："+sum); &#125;&#125; 键盘录入一个整数，判断该数字的奇偶例如，输出：该数字是25，是一个奇数 12345678910111213141516171819202122232425/* 键盘录入一个整数，判断该数字的奇偶 例如，输出：该数字是25，是一个奇数*/import java.util.Scanner;public class GetQiOu&#123; public static void main(String[] args) &#123; /* 1. 需要一个整数,键盘录入(Scanner) 2. 判断奇偶 数 % 2 == 0 偶数 数 % 2 == 1 奇数 */ Scanner sc = new Scanner(System.in); System.out.println("请输入一个整数:"); int x = sc.nextInt(); String s = x % 2 == 0 ? "偶数" : "奇数"; System.out.println("你输入的数为:"+s); &#125;&#125; 2.2.2 Random类Random 类: 生成一个随机数,JDK写好的类,直接使用,使用步骤 导包,import java.util.Random; 创建对象, Random ran = new Random(); ran.方法(),调用类中的功能方法介绍: ran.nextInt(10); 表示随机输出0-10之间的整数(包括0,不包括10,相当于0-9),返回值类型为int类型 Random 案例使用场景: 例如,双色球, 随机点名 生成随机数： 123456789101112131415import java.util.Random;public class C9&#123; public static void main (String[] args) &#123; Random ran = new Random(); int x =ran.nextInt(11); System.out.println("生成的随机数是："+x); &#125;&#125; 3 流程控制语句 if (分支结构)&#8195;我就不说了，和c语言差不多贴几个代码吧。 123456789101112131415161718// if语句的第一种表达方式public class IfDemo1&#123; public static void main(String[] args) &#123; int score = 80; // if语句判断分数,小括号中需要boolean类型的表达式 // 小明考试成绩大于等于80分,那么妈妈给买飞机 if(score &gt;= 80)&#123; System.out.println("买飞机去"); &#125; /* if(客户姓名对不对 &amp;&amp; 客户密码对不对)&#123; 销售或者办业务 &#125; */ &#125;&#125; 123456789101112131415// if else语句 if语句的第二种表达方法public class IfElseDemo&#123; public static void main(String[] args) &#123; int age = 20; // if else 语法结构 if(age &gt;= 18)&#123; System.out.println("独立"); &#125;else&#123; System.out.println("和妈妈一起住"); &#125; &#125;&#125; 12345678910111213141516171819202122// if语句的第三种表达方式import java.util.Scanner;public class IfElseIfDemo&#123; public static void main(String[] args) &#123; //键盘输入任意一个整数,需要告知我,这个数是: 正数/负数/0 Scanner sc = new Scanner(System.in); System.out.println("请输入一个整数"); int x = sc.nextInt(); if( x &lt; 0)&#123; System.out.println("负数"); &#125;else if ( x &gt; 0 )&#123; System.out.println("正数"); &#125;else if( x == 0)&#123; System.out.println("0"); &#125;else&#123; System.out.println("不是数"); &#125; &#125;&#125; 4 晚安&#8195;今天就到这里了，明天见，加油！]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 第二天]]></title>
    <url>%2F2019%2F05%2F28%2FJava-%E7%AC%AC%E4%BA%8C%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[写在开头&#8195;今天学的知识点比较多也比较零碎，大多和之前学过的c语言差不多&#8195;这个开头是第三天加上的，我觉得都加上开头会比较整齐。 😜&#8195;里面的知识点不可能都展现在标题，大家使用搜索功能（很快就可以修复好）搜自己想要了解的知识点。 一、注释、关键字、标识符1.1 注释&#8195;在Java的编写过程中我们需要对一些程序进行注释，除了自己方便阅读，更为别人更好理解自己的程序，所以我们需要进行一些注释，可以是编程思路或者是程序的作用，总而言之就是方便自己他人更好的阅读。注释是不参与程序的编译和运行过程的。 1.1.1 书写注释的必要性&#8195;编写代码时添加注释的好习惯是每一位优秀程序猿都应该具有的。&#8195;举个栗子，老板让你写一个程序，你才思泉涌，三下五除二就写出来一份非常优秀的代码，运行起来非常完美，内存控制的也非常好。老板很满意，奖金也大大地有。但是你没有写注释。过了好久，你又需要这个代码，翻箱倒柜找出来了，打眼一看你傻眼了，这都是些啥啊圈圈叉叉的，你已经没有看下去的欲望了，只想知道这是哪个傻逼写出来的，一想原来是自己…..&#8195;再来一个栗子，我们在公司写项目的时候很多时候都是需要多部门的配合的，你写完这一份程序后是要递交给下一个部门的，如果你没有写注释的话，你的程序是百分百会被打回来的，你知道最后写中文注释会比你边写代码边添加注释慢很多的。 1.1.2 注释的书写方法对于java注释我们主要了解三种： 12345678910111213141516171819202122//单行注释，只能写一行注释/*这是一个多行注释在这个注释内所有文字都不参与程序的编译和运行可以放心的写自己想要写的内容 */public class HelloWorld &#123; public static void main(String[] args) &#123; System.out.println("Hello World"); &#125;&#125;/** *这种叫文档注释，前面我们说过，我们在写项目中大多是协同工作 * * 你需要有一份项目文档让下一个部门更好的理解你编写的程序 * * java bin javadoc文件能把这个文档注释生成项目文档 * *这边我们大体有了解就好了 * * @author：cnfox*/ 1.2 关键字和常见关键字表关键字: 系统定义的特殊的字符,字母,英文单词,在Java中有各自的功能和用途不允许被用户单独定义的。注： 所有的关键字都是小写的，java是严格区分大小写的语言，理论上说大写的关键字是可以被单独定义的，但是避免混淆一般没有这样做的。 所有的关键字再开发工具里，都是有特殊的颜色显示的，如果上面代码中的public、class、out等。 在给类,方法,变量,接口,枚举,起名字时,不能够使用关键字。 贴一张常见的关键字 类别 关键字 说明 访问控制 private 私有的 protected 受保护的 public 公共的 类、方法和变量修饰符 abstract 声明抽象 class 类 extends 扩充,继承 final 最终值,不可改变的 implements 实现（接口） interface 接口 native 本地，原生方法（非 Java 实现） new 新,创建 static 静态 strictfp 严格,精准 synchronized 线程,同步 transient 短暂 volatile 易失 程序控制语句 break 跳出循环 case 定义一个值以供 switch 选择 continue 继续 default 默认 do 运行 else 否则 for 循环 if 如果 instanceof 实例 return 返回 switch 根据值选择执行 while 循环 错误处理 assert 断言表达式是否为真 catch 捕捉异常 finally 有没有异常都执行 throw 抛出一个异常对象 throws 声明一个异常可能被抛出 try 捕获异常 包相关 import 引入 package 包 基本类型 boolean 布尔型 byte 字节型 char 字符型 double 双精度浮点 float 单精度浮点 int 整型 long 长整型 short 短整型 变量引用 super 父类,超类 this 本类 void 无返回值 保留关键字 goto 是关键字，但不能使用 const 是关键字，但不能使用 null 空 1.3 标识符、组成及写作规则 //严格区分大小写标识符：Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。即用户自己定义 所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（ _ ）开始 首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（ _ ）或数字的任何字符组合 关键字不可以作为标识符，并且严格区分大小写。 举例:123(正确)1$(错,数字不能开头)ch(错,不能带有,符号中,只能有 或 $ )charch123_567t$(正确) 二、常量、变量、数据类型2.1 常量2.1.1 常量的定义常量：程序的执行过程中,数值不会发生变化的量 2.1.1四种类型的常量 //final变量 整数类型的常量 5 小数类型的常量 3.1415 字符类型 ‘A’ ‘ a ‘’7’ ‘家’ 布尔类型 boolean true false 在代码中体现下： 1234567891011121314public class ChangLiang &#123; public static void main(String[] args) &#123; //整数类型的常量 System.out.println(5); //小数类型常量 System.out.println(3.14); //字符类型的常量,每次''中只能写一个字符 System.out.println('家'); //布尔类型的常量: 真 假 System.out.println(true); &#125;&#125; 2.1.2常量与默认类型2.2 变量2.2.1 变量的定义变量：指在程序的执行过程中,数值可能会发生变化的量。例如体重， 每天都在变化,所以可以把体重定义成一个变量 2.2.2 变量的组成和定义方法变量的定义格式:数据类型 变量名 = 变量值; 变量名: 符合标识符的组成规范 例如: Ch1 $4 a a1= 表示赋值,将=号右边的数据赋值给左边的变量; 在java中表示一句表达式的结束 我们在代码中体现下： 123456789public class BianLiang &#123; public static void main(String[] args) &#123; // 定义一个变量 int i = 9; System.out.println(i);//9 &#125;&#125; 2.2.3 变量定义的注意事项⭐⭐⭐A:作用域 变量定义在那个大括号内，它就在这个大括号内有效。 并且，在同一个大括号内不能同时定义同名的变量。 B：初始化值 没有初始化值得变量不能直接使用。 只要在使用前给值就行，不一定要在定义是给值。 定义变量的格式： a:数据类型 变量名 = 初始化值； b:数据类型 变量名； 变量名 = 初始化值； C：在一行上建议只定义一个变量 可以定义多个，但不建议我们在代码里体现下： 12345678910111213141516171819202122232425262728293031public class BianLianZhuYi&#123; public static void main(String[] args) &#123; // 1. 向上找离变量最近的一对大括号,这对大括号的范围就是变量可以使用的范围,但只能在变量定义之后使用 int i = 0; &#123; int y = 3; System.out.println(y); System.out.println("括号里"+i); &#125; System.out.println(i); //System.out.println(y); 错误代码,原因,y值使用范围没有到这里 // 2. 同一个区域中,变量不能重复定义,指变量名不能重复 // int i = 9 ; 错误代码,变量重复复定义了 //double i = 3.14; 错误代码,变量重复定义了 i = 99;// 变量的赋值,并不是定义变量 System.out.println("-------"+i);// // 3. 变量的定义和赋值可以分开 int u ; u = 100; System.out.println("++++++++++"+u);// // 4. 在方法中,变量不赋值不能使用 double w; //System.out.println("++++++++++"+u); 错误代码,w定义在方法中,并且没有赋值,不能使用 2.3 数据类型2.3.1 数据类型定义Java的基本数据类型也叫做内置类型是java语言本身提供的数据类型，是引用其他类型的基础。 2.3.2 四类八种基本数据类型 //内存分配4种数据 byte 1字节 -128–127 short 2字节 1111111111111111 -32768–32767 int 4字节 -2147483648–2147483647 long 8字节 -2^63-1–2^63 小数类型 float 4字节 单精度 double 8字节 双精度 字符类型 char 2字节 表示一个字符,写作方式英文’’,举例: ‘家’,’A’,’3’,字符中可能会是中文,中文在内存中需要两个字节,因此char2个字节 布尔类型: boolean true (真) false(假) 布尔类型一般用于进行数据的判断(3&gt;4 结果可以使用false)或者是逻辑的判断(客户姓名正确 并且 客户的密码正确) 我们在代码中体现下： 1234567891011121314151617181920212223242526272829303132333435363738394041public class ShuJuLeiXing &#123; public static void main(String[] args) &#123; //整数byte类型-128-127 byte b = 35; System.out.println(b); //整数short类型 short s = 23; System.out.println(s); //整数int类型 int i = 899; System.out.println(i); // 整数long类型 long l = 345678956; System.out.println(l); // 当整数的值超过int类型的数值范围时,数据后面加L,否则编译错误 long ll = 3456789567899L; System.out.println(ll); // 浮点类型float,定义的float后面需要添加F float f = 3.14F; System.out.println(f); // 浮点类型double,java中的浮点数,默认是double类型 double d = 6.789; System.out.println(d); // 字符类型,使用英文的'',里面可以写一个任意字符 char c = '7'; System.out.println(c); // 布尔类型,true 或者 false boolean b1 = true; System.out.println(b1); &#125;&#125; 2.3.3 基本数据类型的大小排序byte &lt; short = char &lt; int &lt; long &lt; float &lt; double char 字符,’’,占2个字节,范围0-65535boolean 不参与大小比较 说明: 小数长度计算方式,与整数不一样,小数的范围大于整数范围 2.3.4 char字符类型字符类型: char,每次表示一个字符,’7’将每一个字符,转换成了一个10进制数过程: 将一个字符,转换成一个十进制数(编码) 将十进制数,转换成了一个字符(解码) 这种编码和解码的过程,ASCII 码表 ASCII值 控制字符 ASCII值 控制字符 ASCII值 控制字符 ASCII值 控制字符 0 NUT 32 (space) 64 @ 96 、 1 SOH 33 ! 65 A 97 a 2 STX 34 “ 66 B 98 b 3 ETX 35 # 67 C 99 c 4 EOT 36 $ 68 D 100 d 5 ENQ 37 % 69 E 101 e 6 ACK 38 &amp; 70 F 102 f 7 BEL 39 , 71 G 103 g 8 BS 40 ( 72 H 104 h 9 HT 41 ) 73 I 105 i 10 LF 42 * 74 J 106 j 11 VT 43 + 75 K 107 k 12 FF 44 , 76 L 108 l 13 CR 45 - 77 M 109 m 14 SO 46 . 78 N 110 n 15 SI 47 / 79 O 111 o 16 DLE 48 0 80 P 112 p 17 DCI 49 1 81 Q 113 q 18 DC2 50 2 82 R 114 r 19 DC3 51 3 83 S 115 s 20 DC4 52 4 84 T 116 t 21 NAK 53 5 85 U 117 u 22 SYN 54 6 86 V 118 v 23 TB 55 7 87 W 119 w 24 CAN 56 8 88 X 120 x 25 EM 57 9 89 Y 121 y 26 SUB 58 : 90 Z 122 z 27 ESC 59 ; 91 [ 123 { 28 FS 60 &lt; 92 / 124 | 29 GS 61 = 93 ] 125 } 30 RS 62 &gt; 94 ^ 126 ` 31 US 63 ? 95 _ 127 DEL 关注的有哪些: 0-9 在ASCII码表中,对应的十进制数为: 48-57 A-Z 在ASCII码表中,对应的十进制数为: 65-90 a-z 在ASCII码表中,对应的十进制数为: 97-122 ASCII在代码中的应用: 字符与整数进行比较或者运算,这种情况,char类型的字符要先转换成对应的十进制数,然后再与整数进行比较或者运算例如: i 问? 是不是一个小写字母思路: i&gt;=97 并且 i&lt;=122 (比较) ; i+5(运算) 我们在代码中体现下： 1234567891011public class CharDemo &#123; public static void main(String[] args) &#123; /*char类型的字符,可以与整数进行比较或者运算的,先按照ASCII转换成十进制数,在进行比较或者运算 */ char c = 'a';// 97 System.out.println(c &gt; 100);// boolean false System.out.println(c+15);// 97 + 15 = 112 &#125;&#125; 2.3.5 数据类型的自动类型转换不同的数据类型,能一起进行计算吗? 可以自动类型转换: 小的数据类型范围,可以直接转换成大的数据类型范围举例: 水瓶 500ml 杯子 100ml 过程: 杯子中的水装入水瓶中,可以(要求数据类型值一致)byte &lt; short = char &lt; int &lt; long &lt; float &lt; double 我们在代码中体现下： 1234567891011public class ZiDongZhuanHuan&#123; public static void main(String[] args) &#123; //自动类型转换,小的数据类型,转成大的数据类型 byte b = 78; // = 将右边的值,赋给左边的变量 int = byte int i = b ; System.out.println(i); &#125;&#125; 2.3.6 数据类型的强制类型转换强制类型转换: 大的数据类型转换成小的数据类型举例: 水瓶 500ml 杯子 100ml过程: 水瓶中的水装入杯子中,可以(要求数据类型值一致),但是水溢出了 强制类型转换公式: 小的数据类型 变量名 = (小的数据类型)大的数据类型; 我们在代码中体现下： 12345678910public class QiangZhiZhanHuan&#123; public static void main(String[] args) &#123; double d = 3.1415; //小的数据类型 变量名 = (小的数据类型)大的数据类型; int i = (int)d; System.out.println(i);// 3 &#125;&#125; 注意: 在强制类型转换中,可以回出现损失精度(数据可能不准确),所以强制需谨慎 byte short char 在进行整数运算时,都会自动提升为int类型,运算结果也是int类型 我们在代码中体现下： 1234567891011121314151617181920212223public class Test &#123; // byte short char 在进行整数运算时,都会自动提升为int类型,运算结果也是int类型 public static void main(String[] args) &#123; byte b = 70; int i1 = 70+5;// 5常量,5 int类型 System.out.println(b+5);//75 short s = 99; //short = (short)int 强制类型转换 short s1 = (short)(s+b);// short s1 = s+b; short + byte = int 错误,原因,int不能直接转换成short int ss = s+b; System.out.println("int类型+"+ss);//报不报错,不报错的话,结果多少 System.out.println("short类型+"+s1);//报不报错,不报错的话,结果多少 char c = 'A'; // ASCII转换成十进制数 65 int c1 = c+1;// 什么类型? System.out.println(c1); &#125;&#125; 2.4 字符串类型字符串: 使用英文的””,双引号中,可以写入任意的内容Java中,所有字面意义上的””,都是字符串类型String类型,就表示字符串 数据类型分类: 基本数据类型: 用于表达一些比较简单的数据,共8中,不变 引用数据类型(类,数组,接口): 表示在内存中的地址值 比方: 你这个人本身,简单,名字(张三),可以看成基本数据类型家族,复杂,名字(张氏家族), 记录张氏在世界上的地址,看成引用数据类型 String本身就是一个类(class),String是属于引用数据类型 String类型的定义格式;String 变量名 = “78 65 0及”; String使用的注意事项: String与任何的数据类型进行+,都表示字符串的拼接 String与任意类型拼接后的结果,仍然是一个String类型 “”,一定是英文的双引号 我们在代码中体现下： 1234567891011121314151617public class StringDemo &#123; public static void main(String[] args) &#123; //定义一个String类型的字符串 String s = "78 65 0及"; System.out.println(s); // String与任何的数据类型进行+,都表示字符串的拼接 String s1 = "89"; int i = 1; String ss = s1+i; // int ii = s1+i; 错误代码,因为字符串和任意数据类型拼接的结果,仍然是String类型,String无法转换成int System.out.println(s1+i);//891 System.out.println(ss);//891 &#125;&#125; 三、晚安&#8195;今天就到这里了，明天见，加油！]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写在23岁的第一天]]></title>
    <url>%2F2019%2F05%2F28%2F%E5%86%99%E5%9C%A823%E5%B2%81%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[1 &#8195;前天晚上刚从教室回到宿舍，有点乏，但还是想把一天学的东西整理下。 &#8195;妈妈一个电话打过来了，擦擦手接起来–“儿子生日快乐。” &#8195;其实前几天看手机的时候，我就已经知道了。来北京之前宝贝还提前给我过了生日，但是心里还是咯噔了一下，我一直以为还早呢。 2&#8195;一下23岁了，心里有点空。 &#8195;这空来自于内心的迷茫、来自于自己的短见薄识。 &#8195;距离完成毕业论文离开学校才2天的时间，那也是失去了学生光环的庇佑。 &#8195;偶尔感叹时间的流逝，转眼上了大学，又转眼大学毕业了。这不又一不小心都大学毕业参加工作了，23离30岁还有七年的时间，其实留给自己的时间已经不多了。 &#8195;我们总会感叹自己生活的不易，会抱怨生活的残酷，20出头的年纪，却把自己逼得像是三十多岁的中年人，一直觉得自己比谁都努力，却不如别人得到的回报好，最后，生活就只剩下了抱怨吧！ 3 &#8195;嗯？真的努力了么？ &#8195;嗯！出身不高，文凭不高，关键是还没有奋斗目标的我，到了这个年纪心里不禁害怕。 &#8195;23岁之前，有很多事情想做。比如摄影，拍出自己喜欢的图片。PS，平时可以给自己P些好看的图。旅游，去收获成长的风景。也想过学个小语种，但是却又一直在纠结学什么语种好。掌握一门乐器，自己有一根笛子，宝贝把她放了吉他在我这，但是都没有去碰。想的很多，但是真正去做的就比较少。思想上的巨人，行动上的矮子，这话说的就是我，也是真实写照……我羡慕很多人，羡慕她们经济上的财富自由；羡慕她们有胆量、有魄力来一场说走就走的旅行；羡慕她们人脉广泛，可以接触到各种各样的大咖、顶尖人物；羡慕她们可以过上自己想要的生活；羡慕她们知道自己想要的是什么，目标是什么，未来的每一步该怎么走。 &#8195;而我，却一直是个羡慕的人。 &#8195;写下这篇文章，主要是前段时间在知乎上看到一个话题“23 岁的你，曾处于什么样的状态？”想想自己恰好23，正处进行时，而不是过去式。但是，却也引发了自己的恐慌。23岁的我，刚刚踏入社会，站在人生的有一个十字路口，肚子的知识还是太少，一想到要是现在就业就是碌碌一生，就有点头大，终有一天会被生活拍的要死要活。而这，也是我最不愿看到的，也是最害怕的。知道这个理，知道要迫切改变，但是却又不知道怎么改变这种状况。而一切，现今只能骑驴找马了，只能在现有的阶段状况中，去慢慢找到适合自己的、属于自己的位置。该学的还是要学，该走的路还是要走。 4 &#8195;然后我来到了北京。 &#8195;想提高自己的逻辑思维能力、提高自己的归纳总结能力，想有自己的价值输出，比如在学过一个新的知识后、或者关注了一件事情之后，开启头脑风暴，去思考、巩固、不懂得查阅文献、整理写下自己的所得，慢慢的，自然而然就会有自己的价值输出，无论是工作上还是生活上，都将造成很大的影响。 &#8195;23岁的你，过着的是这样的一种生活，希望明年的这个时候，看到这篇文章时，你会是另一副面孔，你的生活、你的工作都会是另一番景象。希望你可以可以做的，早日实现心中的想法，早日找的自己的目标并且实现它。 &#8195;嗯，就先这样了。 5 &#8195;既来之则安之。 &#8195;遇见即是美好，刹那亦是永恒，路过心存感激，留下更是幸运。]]></content>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello Java]]></title>
    <url>%2F2019%2F05%2F27%2Fhello-java%2F</url>
    <content type="text"><![CDATA[写在开始&#8195;从今天开始接触Java这门语言，讲真心里还是蛮激动的，本身自己对于编程挺感兴趣的，以后也有从事计算机这门行业的打算。之前对java的了解仅是了解，可以是说零基础。准备每天晚上以博客的形式，整理下一天学到的知识点，这一期的博客适用于没有任何java基础或者基础比较薄弱同学们。能力有限，写到的东西可能比较零碎但是好在通俗易懂，希望自己可以一直坚持写下去。&#8195;共勉！ 关于java语言&#8195;Java是一门面向对象编程语言，java语言开始于是1995年的sun公司，后来被甲骨文（Oracle）公司收购，Java的版权也就归属了 Oracle。&#8195;Java 的官方网址是：https://www.java.com/ &#8195;在世界编程语言排行榜中，近年来java一直稳居第一名的，虽然近年来收到了Python等新型语言的威胁，偶尔跌下王座。下图是2019年6月份公布的TIOBE编程语言排行榜： &#8195;Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程。 &#8195;Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点 。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等 java安装java版本选择&#8195;最近一次java版本更新是2019年3月份的java12版本。现在使用较多的仍是java 7 和java8 版本。 java EE 、java SE、java ME之间的选择 SE(J2SE)：标准版，适合个人学习和开发java。 EE(J2EE)：企业版，主要用于企业平台开发。 ME(J2ME)：微型版，主要用于移动设备、嵌入式设备上的java应用程序。 JDK、JRE、JVM之间的关系 JDK是Java开发工具包，是整个JAVA的核心。JDK包含java运行环境JRE、一堆Java工具（javac/java/jdb等）和Java基础的类库（即Java API 包括rt.jar），在JDK的安装目录下有一个名为jre的目录。 JRE是运行基于Java语言编写的程序所不可缺少的运行环境。也是通过它，Java的开发者才得以将自己开发的程序发布到用户手中，让用户使用。JRE中包含了JVM和其他运行Java程序的必要组件。 JVM : 虚拟机,存在于JRE中。为不同系统,提供相同的Java文件的运行环境。JVM是整个java实现跨平台的最核心的部分，所有的.java文件会首先被编译为.class的类文件，这种类文件可以在虚拟机上执行。也就是说class并不直接与机器的操作系统相对应，而是经过虚拟机（相当于中间层）间接与操作系统交互，由虚拟机将程序解释给本地系统执行。&#8195;简单的说： JDK : 开发+运行环境 JRE+ 开发工具包(java工具（javac、java）+java基础的类库（java API）)JRE : 程序运行环境JVM+ 运行时需要的核心类库 &#8195;画个图可能更好理解点： java环境变量配置java下载安装 java下载网站 下载好安装包后，双击打开文件下一步就好，安装路径可以修改，但不要放在中文目录下，在安装java jdk的最后，会跳出jre安装的界面，这边是可以安装也可以不安装的，要是想安装的话，安装的路径一定不要放在和jdk相同的目录。 java环境变量配置&#8195;对于Java程序开发而言，主要会使用JDK的两个命令：javac.exe、java.exe。但是这些命令由于不属于windows自己的命令，所以要想使用，就需要进行路径配置。如果不配置环境变量，你编写的java程序就必须在javac和java程序所在的bin目录下运行，很不方便。配置环境变量后，Java程序在任何位置，都可以直接使用Javac和Java命令进行编译运行。注：该环境变量配置是在win7环境下，win10环境大同小异。此处暂且认为JDK安装路径为：&quot;C:\Java\jdk1.8.0_05&quot; 单击“计算机-属性-高级系统设置”，单击“环境变量”。在“系统变量”栏下单击“新建”，创建新的系统环境变量。 配置环境变量 新建-&gt;变量名JAVA_HOME，变量值C:\Java\jdk1.8.0_05（即JDK的安装路径） 编辑-&gt;变量名Path，在原变量值的最后面加上;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin 新建-&gt;变量名CLASSPATH变量值;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar 确认环境变量配置是否正确 &#8195;在控制台cmd分别输入java，javac，java -version 命令，出现如下所示的JDK的编译器信息，包括修改命令的语法和参数选项等信息，即为java环境变量配置正确！ 我们的第一个Java程序&#8195;以下我们通过一个简单的实例来展示 Java 编程，创建文件 HelloWorld.java(文件名需与类名一致), 代码如下： 12345public class HelloWorld &#123; public static void main(String[] args) &#123; System.out.println("Hello World"); &#125;&#125; &#8195;我们首先使用最简单的记事本软件，将以上代码输入，暂且不需要理解里面的代码是什么意思。需要注意的一点是，如果想手动输入代码，需要在全英文状态下输入。然后另存为文档后缀为.java。&#8195;在命令行模式中，输入命令：javac HelloWorld.java，对源代码进行编译，生成class字节码文件HelloWorld.class； &#8195;编译完成后，如果没有报错信息，接下来输入命令：java HelloWorld，对class字节码文件进行解释运行,执行时不需要添加.class扩展名。命令框输出Hello World 输出结果见下： 123javac HelloWorld.javajava HelloWorldHello World 编译过程见下图： 晚安&#8195;今天就到这里了，明天见，加油！]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Hello</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Makedown 进阶语法]]></title>
    <url>%2F2019%2F05%2F22%2FMakedown%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[&#8195;Markdown是由一个叫JOHN GRUBER的哥们发明的。基于Markdown语法的简洁性，它已经成为目前世界上最流行的用于书写博客的语言。&#8195;本文介绍Makedown进阶语法，让同学们能够使用更高级的编辑格式。 1、Makedown 简介&#8195;在我们正式写Makedown语法之前，我们需要了解一下究竟什么是 Markdown？ 1Markdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的 标记语法，它可以使普通文本内容具有一定的格式 &#8195;提到Markdown，很多人首先想到的是简单、Easy等等。的确，Markdown为简单而生。 2、Makedown 进阶语法 有序（无序）排列 &#8195;Markdown支持有序列表和无序列表两种形式： 123456789101112131415161718无序列表使用*标识有序列表使用数字加.标识，例如：1.举个栗子：* 中国人 * 朝鲜人 * 韩国人* 日本人1. 中国人2. 朝鲜人3. 韩国人4. 日本人* * *6. 中国人9. 朝鲜人12. 韩国人66. 日本人 &#8195;以上标记效果如下： 中国人 朝鲜人 韩国人 日本人 中国人 朝鲜人 韩国人 日本人 中国人 朝鲜人 韩国人 日本人 注：这里比较有趣的地方是，对于有序列表，Markdown将只关注你的第一个项目的数字编号。例如：如果第一个项目编号是3，以此类推，第二个项目应该是4，最终将显示为3、4、5。而如果你指定了第一个编号，后面的编号指定错误也没有关系，Markdown将只在乎你的第一个项目编号。结合上面的栗子，会更好理解写。 表格 &#8195;表格是Markdown语法中比较复杂的一个，其语法如下： 123456789101112131415161718表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略举个栗子：| 姓名 | 职业 | 工资 || ---- | :--: | ---: || 张三 | 教师 | 5000 || 李四 | 白领 | 8000 || 王五 | 工人 | 3000 | &#8195;以上标记效果如下： 姓名 职业 工资 张三 教师 5000 李四 白领 8000 王五 工人 3000 高亮一段代码 &#8195;编写技术博客过程中，插入代码是最重要的一部分，Makedown为不同的编程语言做出了高亮优化，以java为例，其他语言类似： 123456```javapublic class HelloWorld &#123; public static void main(String[] args) &#123; System.out.println(&quot;Hello World&quot;); &#125;&#125; &#8195;以上标记效果如下： 12345public class HelloWorld &#123; public static void main(String[] args) &#123; System.out.println("Hello World"); &#125;&#125; &#8195;其他语言实例: Python 示例： 123456789101112@requires_authorizationdef somefunc(param1='', param2=0): '''A docstring''' if param1 &gt; param2: # interesting print 'Greater' return (param2 - param1 + 1) or Noneclass SomeClass: pass&gt;&gt;&gt; message = '''interpreter... prompt''' JavaScript 示例： 1234567891011121314151617/*** nth element in the fibonacci series.* @param n &gt;= 0* @return the nth element, &gt;= 0.*/function fib(n) &#123; var a = 1, b = 1; var tmp; while (--n &gt;= 0) &#123; tmp = a; a += b; b = tmp; &#125; return a;&#125;document.write(fib(10)); 待办事宜-Todo列表 &#8195;写博客有时候会记录自己的生活和写一些计划嘛，这时候就需要用到待办事宜，Makedown也提供了类似的语法： 12345- [x] 支持以 PDF 格式导出文稿- [x] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率- [x] 新增 Todo 列表功能- [ ] 修复 LaTex 公式渲染问题- [ ] 新增 LaTex 公式编号功能 &#8195;以上标记效果如下： 支持以 PDF 格式导出文稿 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 新增 Todo 列表功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能]]></content>
      <tags>
        <tag>Makedown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Makedown 基础语法]]></title>
    <url>%2F2019%2F05%2F21%2FMakedown-%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[&#8195;Markdown是由一个叫JOHN GRUBER的哥们发明的。基于Markdown语法的简洁性，它已经成为目前世界上最流行的用于书写博客的语言。&#8195;本文介绍Makedown基础语法，满足初学者使用Makedown编辑博客的需求。 1、Makedown 简介&#8195;在我们正式写Makedown语法之前，我们需要了解一下究竟什么是 Markdown？ 1Markdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的 标记语法，它可以使普通文本内容具有一定的格式 &#8195;提到Markdown，很多人首先想到的是简单、Easy等等。的确，Markdown为简单而生。 2、Makedown 基础语法&#8195;在编写 Markdown 时，博主强烈的推荐给大家一款简洁易用的Markdown编辑器——Typora。按照官方的说法就是简单而强大，它不仅支持原生的语法，也支持对应的快捷键，更重要的是它还可以实时预览!这里附上 Typora 的下载地址：https://www.typora.io/,有兴趣的朋友可以下载来试试。&#8195;好，下面开始进入正题，介绍一些常用的 Markdown 语法! 标题 &#8195;Markdown支持6种级别的标题，对应html标签 h1 ~ h6 123456# h1## h2### h3#### h4##### h5###### h6 &#8195;以上标记效果如下： h1h2h3h4h5h6 强调符号 &#8195;有时候，我们希望对某一部分文字进行强调，实现加粗、斜体、删除线和分割线等功能。 12345678910*斜体***加粗*****加粗斜体***~~删除线~~分割线* * * &#8195;以上标记效果如下： 斜体 加粗 加粗斜体 删除线 分割线 段落及区块引用 &#8195;另外一个比较常见的需求就是，我们可能希望对某段文字进行强调处理。Markdown提供了一个特殊符号&gt;用于段首进行强调，被强调的文字部分将会高亮显示 12&gt; 这段文字将被引用&gt;&gt;也可以多级引用 &#8195;以上标记效果如下： 这段文字将被引用 也可以多级引用 也可以多级引用 也可以多级引用 首行缩进 &#8195;由于markdown语法主要考虑的是英文，所以对于中文的首行缩进并不太友好。 1&amp;#8195;在开头的时候，先输入开头的代码，然后紧跟着输入文本即可，分号也不要掉。 &#8195;以上标记效果如下：&#8195;在开头的时候，先输入下面的代码，然后紧跟着输入文本即可。分号也不要掉。 代码 &#8195;单行代码：代码之间分别用一个反引号包起来&#8195;代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行 1234567`单行代码`(```) 代码块 代码块 代码快(```) 注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。 &#8195;以上标记效果如下：单行代码 123代码块代码块代码块 超链接&#8195;Markdown针对链接和图片的处理也比较简单，可以使用下面的语法进行标记123456789[链接文字描述](链接地址)或&lt;链接地址&gt;举个栗子： [cnfox博客跳转链接](https://cnfox.github.io/) &lt;https://cnfox.github.io/&gt; &#8195;以上标记效果如下：cnfox博客跳转链接https://cnfox.github.io/ 1234567![图片alt](图片地址 )图片alt就是图片的标题，当鼠标移到图片上时显示的内容。alt可加可不加举个栗子： ![cnfox LOGO](http://prvznqstr.bkt.clouddn.com/ing/cnfoxlogo.png) &lt;http://prvznqstr.bkt.clouddn.com/ing/cnfoxlogo.png&gt; &#8195;以上标记效果如下： http://prvznqstr.bkt.clouddn.com/ing/cnfoxlogo.png]]></content>
      <tags>
        <tag>Makedown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello Hexo]]></title>
    <url>%2F2019%2F05%2F09%2Fhello-hexo%2F</url>
    <content type="text"><![CDATA[&#8195;花了几天搭建了个网站，先上链接，欢迎来访：cnfox的个人博客&#8195;一直想搭建一个自己的博客，写一下自己学习的一些经验遇到的一些坑，还有自己的一些生活的笔记。拖延至此，一是因为自己知识储备还不够，而且市面上的博客很多，尝试了很多个，如CSDN，博客园，简书等平台，可以从上面直接发表，用户交互做的好，写的文章百度也能搜索的到。缺点是比较不自由，会受到平台的各种限制和恶心的广告。再就是一直没有合适的时间去搭建维护。&#8195;现在直接在github page平台上托管我们的博客。这样就可以安心的来写作，又不需要定期维护，而且hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。注：所有的环境配置和安装均在windows环境下进行。 Hexo简介—轻量、简易、高逼格&#8195;主页：https://hexo.io/zh-cn/&#8195;主页里介绍的很详细，我在这里就不做多余的赘述了，简单说下： Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。 exo 正常来说，不需要部署到我们的服务器上，我们的服务器上保存的，其实是基于在hexo通过markdown编写的文章，然后hexo帮我们生成静态的html页面，然后，将生成的html上传到我们的服务器。简而言之：hexo是个静态页面生成、上传的工具。 Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。 教程分三个部分 第一部分：hexo环境搭建、hexo安装与启动 第二部分：GitHub账号注册、hexo部署到GitHub page 第三部分：hexo主题安装、next主题美化、next添加功能 源码结构 文件/文件夹 说明 _config.yml hexo配置文件 public hexo生成的静态文件，这个目录最终会发布到服务器 scaffolds makedown模板，写文章或者其他页面的样式 source 使用makedown编写的文章文件等 themes 主题文件夹 &#8195;我们正常使用中，修改最多的是源码是_config.yml,不管是博客的基础配置，还是主题的设定，都是修改这个文件，后期安装主题后的博客美化就主要在themes/主题文件夹下的_config.yml文件里修改了。&#8195;ource是我们日常写文章要用的目录，是我们日常撰写文章的文件夹。 Hexo搭建步骤1.安装Git2.安装Node.js3.安装Hexo4.注册GitHub账号，创建个人仓库5.生成本地SSH密钥并添加到GitHub6.将hexo部署到GitHub7.发布文章 1.安装Git&#8195;Git(读音为/gɪt/)是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。用来管理你的hexo博客，上传到GitHub的工具。 下载地址 安装步骤：双击下载好的exe安装包，无脑next就好了。 安装好后，桌面右击点击Git Bash Here输入命令查看下git版本： 命令git version (写这篇博客的时候最新版本：2.21.0) Git安装完成。 2.安装Node.js&#8195;简单的说，Node.js是运行在服务端的JavaScript。Node.js是一个基于Chrome JavaScript运行时建立的一个平台。Hexo是基于Node.js环境的静态博客，所以需要安装Node.js。 下载地址 (说明：LTS为长期支持版，Current为当前最新版) 安装步骤：双击下载好的exe安装包，无脑next就好了。 安装好后，桌面右击点击Git Bash Here输入命令查看下Node.js和npm的版本： 命令node --version 、npm -v(写这篇博客的时候最新版本：10.15.3) Node.js安装完成。 3.安装Hexo&#8195;完成前面的Git和Node.js的安装就可以安装Hexo了,创建一个存放博客的文件夹，右击点击Git Bash Here输入命令安装Hexo： 1$ npm install -g hexo-cli &#8195;使用hexo -v查看hexo版本。 &#8195;初始下Hexo： 123$ hexo init blog $ cd blog \\进入blog文件夹$ npm install &#8195;操作至此，Hexo博客就安装完成了，我们先梳理下本地文件都有什么作用： 12345678910├── _config.yml \\ 网站配置文件├── db.json├── node_modules├── package-lock.json├── package.json \\ 应用程序信息├── public \\ 静态站点存放于此├── scaffolds \\ 模板文件夹，新建文章时会使用此文件夹下的文件作为模板├── source \\ 存放用户资源的地方├── themes \\ 主题└── yarn.lock &#8195;接下来就是构建博客文件和开启本地服务器，因为hexo使用makedown编写，然后生成静态文件，实际上传的是静态网页。 12345$ hexo g \\ 相当于 hexo generate,生成的静态站点放在 public 目录下面...$ hexo s \\ 相当于 hexo server，启动服务，本地预览INFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. &#8195;打开 http://localhost:4000/ ，查看效果。 4.注册GitHub账号，创建个人仓库]]></content>
      <tags>
        <tag>Hello</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F07%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. QUICK STARTCreate a new post //生成新的文章页面1$ new &quot;My New Post&quot; More info: Writing Run server //启动hexo服务1$ hexo server More info: Server Generate static files //生成静态页面1$ hexo generate More info: Generating Deploy to remote sites //部署远程服务器1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>Hello</tag>
      </tags>
  </entry>
</search>
